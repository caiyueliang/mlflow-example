1。进入目录：mlflow-example/

2。用python训练模型：
python train.py <alpha> <l1_ratio>

3。用mlflow来训练模型：
mlflow run https://github.com/mlflow/mlflow-example.git -P alpha=5              # git方式启动
mlflow run ./ -P alpha=0.5                                                      # 本地启动
mlflow run ./ --no-conda -P alpha=0.5                                           # 不新建conda环境
mlflow run ./ -e train_1 -P alpha=0.5                                           # 选择不同的入口点
mlflow run ./ -e logistic_regression

4。Wei UI
mlflow ui

5。启动服务：
mlflow models serve -m runs:/<RUN_ID>/model
mlflow models serve -m runs:/<RUN_ID>/model --port 1234                         # 指定端口
mlflow models serve -m runs:/58179397dd214903a574c23f10243264/model
mlflow models serve --no-conda -m runs:/58179397dd214903a574c23f10243264/model  # 不新建conda环境
mlflow models serve -m /Users/mlflow/mlflow-prototype/mlruns/0/7c1a0d5c42844dcdb8f5191146925174/artifacts/model -p 1234

mlflow models serve -m runs:/681d3a91fed14d62a7f86447c58ad73a/model --port 1234
mlflow models serve -m runs:/a73abffb78584f41a0e106c3ae2fb6a9/model --port 1234
mlflow models serve -m runs:/0dcd91dcae794657b6b153019d3c7ed2/model_1 --port 1234


curl -d '{"columns":["x"], "data":[[1], [-1]]}' -H 'Content-Type: application/json; format=pandas-split' -X POST localhost:5000/invocations

6。在实验中组织运行
export MLFLOW_EXPERIMENT_NAME=fraud-detection
mlflow experiments create --experiment-name fraud-detection

7。MLflow跟踪服务器：
mlflow server \
    --backend-store-uri /Users/qudian/persistent-disk \
    --default-artifact-root file:///Users/qudian/qudian-ml/mlflow-example/mlruns/ \
    --host 0.0.0.0
mlflow server \
    --backend-store-uri /Users/qudian/persistent-disk \
    --default-artifact-root /Users/qudian/qudian-ml/mlflow-example/mlruns/ \
    --host 0.0.0.0
mlflow server \
    --backend-store-uri mysql://id:pw1!@host:3306/mlflow \
    --default-artifact-root hdfs://:host:50070/data/pay_model/ \
    --host 0.0.0.0


8。REST API
https://www.mlflow.org/docs/latest/rest-api.html
创建实验：http://localhost:5000/api/2.0/mlflow/experiments/create
列出实验：http://localhost:5000/api/2.0/mlflow/experiments/list

创建运行：http://localhost:5000/api/2.0/mlflow/runs/create
获取运行：http://localhost:5000/api/2.0/mlflow/runs/get      # 获取运行的元数据，指标，参数和标签。

获取metrics历史记录：http://localhost:5000/api/2.0/mlflow/metrics/get-history

列出artifacts：http://localhost:5000/api/2.0/mlflow/artifacts/list

# ==============================================================================
2.实验：
2.1.创建实验名称：
mlflow experiments create --experiment-name [name]
mlflow experiments create --experiment-name Test_1

2.2.运行实验：
mlflow run [...] --experiment-name [name]
mlflow run ./ --no-conda -P alpha=0.5 --experiment-name Test_1

2.3.运行一个commit id:（只支持Git）
mlflow run git@github.com:caiyueliang/mlflow-example.git --no-conda -P alpha=0.5                            # 不会做git clone，只生成mlruns/

mlflow run git@github.com:caiyueliang/mlflow-example.git --no-conda -P alpha=0.5 --experiment-name Test_1
mlflow run git@github.com:caiyueliang/mlflow-example.git --no-conda -P alpha=0.9 --experiment-name Test_1 -v 61139ef432cacb2f927fd7923e32de515467f3db

# ==============================================================================
3.1.重新运行某一个RUN ID，与experiment-name无关
mlflow run ./ --no-conda -P alpha=0.5 --run-id 2b9d7f09da0b480bb6adcfb7b1e129b7

# ==============================================================================
mlflow run 参数：
-v, --version VERSION        Version of the project to run, as a Git commit reference for Git projects.

-b, --backend BACKEND
如果针对Databricks运行，将针对Databricks工作区运行，确定如下：如果设置了“databricks://profile”形式的Databricks跟踪URI（例如，通过设置mlflow_tracking_uri环境变量），将针对<profile>指定的工作区运行。
否则，将针对默认databricks cli配置文件指定的工作区运行。请参阅https://github.com/databricks/databricks-cli以获取有关配置databricks cli配置文件的更多信息。

-c, --backend-config FILE
json文件的路径（必须以“.json”结尾）或json字符串，该字符串将作为配置传递到后端。对于Databricks后端，这应该是一个集群规范：有关详细信息，
请参阅https://docs.data bricks.com/api/latest/jobs.html_jobs cluster spec newcluster。请注意，MLFlow运行当前是针对新集群启动的。

--storage-dir TEXT            仅当“backend”是local.mlflow时才有效。mlflow从分布式URI下载项目，将项目传递给类型为“path”的参数，并将其传递给存储目录的子目录。

--run-id RUN_ID               如果指定，将使用给定的运行ID，而不是创建新的运行。注意：此参数由MLFlow项目API内部使用，不应指定。

# ==============================================================================
mlflow experiments: 管理实验，查找，删除等
mlflow experiments --help
Commands:
  create   Create an experiment.
  delete   Mark an active experiment for deletion.
  list     List all experiments in the configured tracking server.
  rename   Renames an active experiment.
  restore  Restore a deleted experiment.

# ==============================================================================
mlflow runs: 管理run，查找，删除等
Commands:
  delete    Mark a run for deletion.
  describe  All of run details will print to the stdout as JSON format.
  list      List all runs of the specified experiment in the configured...
  restore   Restore a deleted run.
mlflow runs list --experiment-id [id]
mlflow runs delete --run-id [id]








# ==============================================================================
